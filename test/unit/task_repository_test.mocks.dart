// Mocks generated by Mockito 5.4.6 from annotations
// in advanced_task_manager/test/unit/task_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:advanced_task_manager/task_manager/data/datasources/task_api_datasource.dart'
    as _i2;
import 'package:advanced_task_manager/task_manager/data/datasources/task_hive_datasource.dart'
    as _i5;
import 'package:advanced_task_manager/task_manager/data/models/task_manager_models.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [TaskApiDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskApiDatasource extends _i1.Mock implements _i2.TaskApiDatasource {
  MockTaskApiDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.TaskModel>> getTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, []),
            returnValue: _i3.Future<List<_i4.TaskModel>>.value(
              <_i4.TaskModel>[],
            ),
          )
          as _i3.Future<List<_i4.TaskModel>>);
}

/// A class which mocks [TaskHiveDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskHiveDatasource extends _i1.Mock
    implements _i5.TaskHiveDatasource {
  MockTaskHiveDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> saveTasks(List<_i4.TaskModel>? tasks) =>
      (super.noSuchMethod(
            Invocation.method(#saveTasks, [tasks]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasks() =>
      (super.noSuchMethod(
            Invocation.method(#getTasks, []),
            returnValue: _i3.Future<List<_i4.TaskModel>>.value(
              <_i4.TaskModel>[],
            ),
          )
          as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<List<_i4.TaskModel>> getTasksByFilter(bool? isCompleted) =>
      (super.noSuchMethod(
            Invocation.method(#getTasksByFilter, [isCompleted]),
            returnValue: _i3.Future<List<_i4.TaskModel>>.value(
              <_i4.TaskModel>[],
            ),
          )
          as _i3.Future<List<_i4.TaskModel>>);

  @override
  _i3.Future<bool> updateTask(_i4.TaskModel? task) =>
      (super.noSuchMethod(
            Invocation.method(#updateTask, [task]),
            returnValue: _i3.Future<bool>.value(false),
          )
          as _i3.Future<bool>);

  @override
  _i3.Future<_i4.TaskModel?> getTask(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#getTask, [id]),
            returnValue: _i3.Future<_i4.TaskModel?>.value(),
          )
          as _i3.Future<_i4.TaskModel?>);
}
